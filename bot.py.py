import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
# –°–ª–æ–≤–∞—Ä—å: user_id ‚Üí [–ê—Ä–∫–∞–Ω1, –ê—Ä–∫–∞–Ω2, –ê—Ä–∫–∞–Ω3]
user_arcana_map = {}

# –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
ADMIN_ID = 7213698409  # ‚Üê —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π ID –∏–∑ @userinfobot
# –°–ø–∏—Å–æ–∫ –ê—Ä–∫–∞–Ω–æ–≤
ARCANA = [
    "–®—É—Ç", "–ú–∞–≥", "–ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä", "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "–í–ª—é–±–ª—ë–Ω–Ω—ã–µ",
    "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "–û—Ç—à–µ–ª—å–Ω–∏–∫", "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–∏–ª–∞", "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π",
    "–°–º–µ—Ä—Ç—å", "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä"
]

logging.basicConfig(level=logging.INFO)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", callback_data="get_fate")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–°—É–¥—å–±—É –¢—Ä—ë—Ö –ê—Ä–∫–∞–Ω–æ–≤¬ª!\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—ë –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected = random.sample(ARCANA, 3)
    user_id = query.from_user.id
    user_arcana_map[user_id] = selected  # ‚Üê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä–∫–∞–Ω—ã

    response = (
        f"üß≠ –¢–≤–æ—è –°—É–¥—å–±–∞:\n"
        f"‚ú¥Ô∏è –ü—Ä–æ—à–ª–æ–µ: {selected[0]}\n"
        f"üîÅ –ù–∞—Å—Ç–æ—è—â–µ–µ: {selected[1]}\n"
        f"üîÆ –ë—É–¥—É—â–µ–µ: {selected[2]}\n\n"
        f"üí¨ –ù–∞–ø–∏—à–∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ –≤—ã–ø–∞–≤—à–∏–º –∞—Ä–∫–∞–Ω–∞–º."
    )

    await query.edit_message_text(text=response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    user_id = user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–∫–∞–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏
    arcana = user_arcana_map.get(user_id)
    arcana_text = (
        f"‚ú¥Ô∏è –ü—Ä–æ—à–ª–æ–µ: {arcana[0]}\nüîÅ –ù–∞—Å—Ç–æ—è—â–µ–µ: {arcana[1]}\nüîÆ –ë—É–¥—É—â–µ–µ: {arcana[2]}"
        if arcana else "‚ùó –ê—Ä–∫–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –∫–Ω–æ–ø–∫—É –Ω–µ –Ω–∞–∂–∞—Ç–∞)"
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–±–µ –≤ –ª–∏—á–∫—É
    message = (
        f"üì© –û—Ç–≤–µ—Ç –æ—Ç {user.full_name or user.username} (@{user.username}):\n\n"
        f"{arcana_text}\n\n"
        f"üí¨ –û—Ç–≤–µ—Ç:\n{text}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=message)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text("üîÆ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. –°—É–¥—å–±–∞ —Å–ª—É—à–∞–µ—Ç —Ç–µ–±—è...")
# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    BOT_TOKEN = "8158969851:AAEYOJQDd1dsRiaCTdbFfmpf0JuPRZg-NRM"  # ‚Üê –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_click))
    from telegram.ext import MessageHandler, filters

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()